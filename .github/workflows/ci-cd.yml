name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main, develop]

permissions:
  contents: write
  security-events: write
  actions: read
  deployments: write

env:
  REPO_NAME: template-ci-cd
  ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'prod' || 'staging' }}
  ECR_REPOSITORY: ${{ vars.ECR_NAMESPACE }}/template-ci-cd
  IMAGE_TAG: v${{ github.run_number }}-${{ github.sha }}

jobs:
  lint:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check Prettier formatting
        run: npm run format:check

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run build
        run: npm run build

      - name: Create build artifact
        run: |
          mkdir -p build-artifacts
          find . -maxdepth 1 -type f -exec cp {} build-artifacts/ \;
          cp -r coverage build-artifacts/ 2>/dev/null || true
          rm -rf build-artifacts/node_modules
          rm -rf build-artifacts/.git

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: build-artifacts/
          retention-days: 7

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [lint, test, build]
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for scanning
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          platforms: linux/amd64
          tags: ${{ env.REPO_NAME }}:scan
          cache-from: type=gha,scope=buildx-scan
        timeout-minutes: 5

      - name: Verify Docker image exists
        run: |
          docker images | grep template-ci-cd || echo "‚ùå Image not found"
          docker inspect ${{ env.REPO_NAME }}:scan || echo "‚ùå Image inspect failed"

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REPO_NAME }}:scan
          format: 'sarif'
          output: 'trivy-results.sarif'
          timeout: '5m'
        continue-on-error: true

      - name: Check if SARIF file exists
        id: check_sarif
        run: |
          if [ -f "trivy-results.sarif" ]; then
            echo "sarif_exists=true" >> $GITHUB_OUTPUT
            echo "‚úÖ SARIF file created successfully"
            ls -la trivy-results.sarif
          else
            echo "sarif_exists=false" >> $GITHUB_OUTPUT
            echo "‚ùå SARIF file not found"
          fi

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() && steps.check_sarif.outputs.sarif_exists == 'true'
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy-container-scan'
          wait-for-processing: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Show SARIF upload status
        if: always() && steps.check_sarif.outputs.sarif_exists == 'true'
        run: |
          echo "‚úÖ SARIF file upload attempted"
          echo "üìÑ File: trivy-results.sarif"
          echo "üîç Check the Security tab for scan results"

      - name: Run Trivy for PR comments
        uses: aquasecurity/trivy-action@master
        if: github.event_name == 'pull_request'
        with:
          image-ref: ${{ env.REPO_NAME }}:scan
          format: 'table'
          exit-code: '0'

  deploy-ecs:
    name: Deploy to AWS ECS
    runs-on: ubuntu-latest
    needs: [lint, test, build]
    timeout-minutes: 20
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'prod' || 'staging' }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.3.1
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ROLE_NAME }}
          role-session-name: gh-oidc-${{ env.REPO_NAME }}-${{ github.job }}-${{ github.run_id }}-${{ github.run_attempt }}
          role-duration-seconds: 3600

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set environment variables
        run: |
          echo ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }} >> $GITHUB_ENV

      - name: Build Docker image
        run: |
          docker build -t $ECR_REGISTRY/${{ vars.ECR_NAMESPACE }}/${{ env.REPO_NAME }}:$IMAGE_TAG .

      - name: Push image to Amazon ECR
        run: |
          docker push $ECR_REGISTRY/${{ vars.ECR_NAMESPACE }}/${{ env.REPO_NAME }}:$IMAGE_TAG

      - name: Replace ECS Task Definition
        run: |
          cp .github/.aws/task-definition.json task-definition-temp.json

          sed -i "s/{{ACCOUNT_ID}}/${{ secrets.AWS_ACCOUNT_ID }}/g" task-definition-temp.json
          sed -i "s/{{ORG_NAME}}/${{ vars.ORG_NAME }}/g" task-definition-temp.json
          sed -i "s/{{ENVIRONMENT}}/${{ env.ENVIRONMENT }}/g" task-definition-temp.json

      - name: Render ECS Task Definition
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition-temp.json
          environment-variables: |
            ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}
            ENVIRONMENT=${{ env.ENVIRONMENT }}
            RELEASE_VERSION=${{ env.IMAGE_TAG }}
            GIT_COMMIT=${{ github.sha }}
            ECS_SERVICE=${{ vars.ECS_SERVICE_NAME_PREFIX }}
            ECS_CLUSTER=${{ vars.ECS_CLUSTER_NAME }}
          container-name: ${{ vars.ORG_NAME }}-${{ env.ENVIRONMENT }}-template-ci-cd
          image: ${{ env.ECR_REGISTRY }}/${{ vars.ECR_NAMESPACE }}/${{ env.REPO_NAME }}:${{ env.IMAGE_TAG }}

      - name: Deploy to ECS
        id: deploy
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render-task-def.outputs.task-definition }}
          cluster: ${{ vars.ECS_CLUSTER_NAME }}
          service: ${{ vars.ECS_SERVICE_NAME_PREFIX }}
          wait-for-service-stability: true
          force-new-deployment: true

  smoke-test:
    name: Smoke Test
    runs-on: ubuntu-latest
    needs: deploy-ecs
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'prod' || 'staging' }}
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Health Check
        run: |
          echo "üè• Testing Health Check endpoint..."
          echo "URL: ${{ vars.API_URL}}/health"

          max_retries=30
          count=0
          while [ $count -lt $max_retries ]; do
            response=$(curl -s -o /dev/null -w "%{http_code}" "${{ vars.API_URL}}/health")
            if [ "$response" = "200" ]; then
              echo "‚úÖ Health check passed! (Status: $response)"
              exit 0
            fi
            echo "‚è≥ Attempt $((count+1))/$max_retries - Status: $response"
            sleep 10
            count=$((count+1))
          done

          echo "‚ùå Health check failed after $max_retries attempts"
          exit 1

      - name: API Status Check
        run: |
          echo "üìä Testing Status endpoint..."
          response_code=$(curl -s -o /dev/null -w "%{http_code}" "${{ vars.API_URL}}/status")
          echo "Status endpoint response: $response_code"
          if [ "$response_code" != "200" ]; then
            echo "‚ùå Status check failed! (Status: $response_code)"
            exit 1
          fi
          echo "‚úÖ Status check passed!"

      - name: Create Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            ## üöÄ Resumo do Deploy

            **Deploy realizado em:** ${{ github.run_started_at }}
            **Commit:** ${{ github.sha }}

            ### üìã Endpoints da API:
            - **Health Check:** `${{ vars.API_URL}}/health`
            - **Status:** `${{ vars.API_URL}}/status`
            - **Root:** `${{ vars.API_URL}}/`

            ## üìù Altera√ß√µes

            ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false
